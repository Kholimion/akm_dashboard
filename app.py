import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import os
from datetime import datetime

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "metrics_data.csv"

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
DIRECTIONS = [
    "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤", "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π –º–æ–Ω—Ç–∞–∂", "–ú–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
    "–§–æ—Ç–æ–Ω–∏–∫–∞", "–ò—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–†–µ—à–µ–Ω–∏—è –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", "Ainuo", "–ó–æ–Ω–¥–æ–≤—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏",
    "LoadPull", "–ö–≤–∞–Ω—Ç—ã", "–†–∞–¥–∏–æ–∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã", "–¢–µ–ª–µ–∫–æ–º", "–£—Å–∏–ª–∏—Ç–µ–ª–∏", "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å",
    "–ê–∫–º–µ—Ç–µ—Ö", "–ü–û", "–°–µ—Ä–≤–∏—Å"
]

# –ú–µ—Ç—Ä–∏–∫–∏
METRICS = ["–°—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–¥–∞–∂–∏", "–ö–æ–º–∞–Ω–¥–∞"]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        return pd.read_csv(DATA_FILE)
    else:
        return pd.DataFrame(columns=["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ú–µ—Å—è—Ü"] + METRICS + ["–û–±—â–∞—è —Ü–∏—Ñ—Ä–∞"])

def save_data(df):
    df.to_csv(DATA_FILE, index=False)

# –†–∞–¥–∞—Ä-–¥–∏–∞–≥—Ä–∞–º–º–∞ (Plotly)
def plot_radar(metrics_values):
    labels = METRICS + [METRICS[0]]
    values = metrics_values + [metrics_values[0]]

    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=labels,
        fill='toself',
        name="",
        line_color='lightblue',
        fillcolor='rgba(173, 216, 230, 0.4)'
    ))

    fig.update_layout(
        autosize=False,
        width=360,
        height=360,
        paper_bgcolor='#0e1117',
        plot_bgcolor='#0e1117',
        font_color='white',
        margin=dict(t=30, b=20, l=30, r=30),
        polar=dict(
            bgcolor='#1c1f26',
            radialaxis=dict(visible=True, range=[0, 10], showline=False, gridcolor="gray"),
            angularaxis=dict(gridcolor="gray")
        ),
        showlegend=False
    )

    return fig

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.set_page_config(page_title="–ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è", layout="wide")
st.markdown("""
    <style>
        h1, h2, h3, .stMetricLabel { font-size: 1.2em !important; }
        .block-container { padding-top: 2rem !important; }
    </style>
""", unsafe_allow_html=True)

st.markdown("<h1 style='margin-bottom: 0.5rem;'>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º</h1>", unsafe_allow_html=True)

menu = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", ["–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", "–û—Ç—á–µ—Ç—ã"])

# --- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ---
if menu == "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö":
    st.header("–í–≤–æ–¥ –º–µ—Ç—Ä–∏–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é")

    direction = st.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", DIRECTIONS)
    month = st.text_input("–ú–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-08):", value=datetime.now().strftime("%Y-%m"))

    col1, col2 = st.columns(2)
    with col1:
        m1 = st.slider(METRICS[0], 0.0, 10.0, 5.0, 0.1)
        m2 = st.slider(METRICS[1], 0.0, 10.0, 5.0, 0.1)
    with col2:
        m3 = st.slider(METRICS[2], 0.0, 10.0, 5.0, 0.1)
        m4 = st.slider(METRICS[3], 0.0, 10.0, 5.0, 0.1)

    overall = round((m1 + m2 + m3 + m4) / 4, 2)
    st.metric("–û–±—â–∞—è —Ü–∏—Ñ—Ä–∞", overall)

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç"):
        df = load_data()
        new_row = pd.DataFrame.from_dict({
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": [direction],
            "–ú–µ—Å—è—Ü": [month],
            METRICS[0]: [m1], METRICS[1]: [m2], METRICS[2]: [m3], METRICS[3]: [m4],
            "–û–±—â–∞—è —Ü–∏—Ñ—Ä–∞": [overall]
        })
        df = pd.concat([df, new_row], ignore_index=True)
        save_data(df)
        st.success("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

# --- –û—Ç—á–µ—Ç—ã ---
elif menu == "–û—Ç—á–µ—Ç—ã":
    st.header("üìà –û—Ç—á–µ—Ç—ã –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    df = load_data()

    if df.empty:
        st.info("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç—á–µ—Ç.")
    else:
        col_left, col_right = st.columns([1, 1], gap="large")

        with col_left:
            selected_direction = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"].unique())
            months = df[df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == selected_direction]["–ú–µ—Å—è—Ü"].unique()
            selected_month = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", months)
            row = df[(df["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"] == selected_direction) & (df["–ú–µ—Å—è—Ü"] == selected_month)].iloc[-1]

            st.markdown(f"<h3 style='margin-top: 0.5rem;'>–î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º ({selected_month})</h3>", unsafe_allow_html=True)
            st.dataframe(
                row[METRICS + ["–û–±—â–∞—è —Ü–∏—Ñ—Ä–∞"]].to_frame(name="–ó–Ω–∞—á–µ–Ω–∏–µ"),
                use_container_width=True,
                hide_index=False
            )

        with col_right:
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∏–∞–≥—Ä–∞–º–º–∞
            st.markdown(
                f"""
                <div style='text-align:center; margin-top: -0.5rem; margin-bottom: 0.8rem'>
                    <h3>{selected_direction} ‚Äî {selected_month}</h3>
                </div>
                """, unsafe_allow_html=True
            )
            fig = plot_radar([row[m] for m in METRICS])
            st.plotly_chart(fig, use_container_width=False, config={"displayModeBar": False})
